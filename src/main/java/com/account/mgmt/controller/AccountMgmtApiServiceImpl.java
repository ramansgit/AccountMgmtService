package com.account.mgmt.controller;

import javax.ws.rs.core.Response;

import com.account.mgmt.exception.MongoDatabaseException;
import com.account.mgmt.handlers.SignInHandler;
import com.account.mgmt.handlers.SignupHandler;
import com.account.mgmt.handlers.UserInfoHandler;
import com.account.mgmt.model.SignupResp;
import com.account.mgmt.model.UserSignIn;
import com.account.mgmt.model.UserSignup;
import com.account.mgmt.util.AccountMgmtConstant;
import com.account.mgmt.util.ResponseUtil;

public class AccountMgmtApiServiceImpl extends AccountMgmtApiService {

	/**
	 * allows user to register into the system
	 */
	@Override
	public Response signup(UserSignup data) {
		String userId = "";
		SignupHandler handler = new SignupHandler();
		try {
			// validate request and
			// check user already registered or not
			handler.validationPhase(data);

			// generate userId for the user
			handler.generteUserId(data);

			// save user signup request, userId will be auto generated by mongo.
			userId = handler.saveUser(data);

		} catch (Exception e) {
			// send error response back to the user
			return ResponseUtil.handleException(e);
		}
		// send success response back to the user
		return ResponseUtil.handleSuccessResp(new SignupResp(userId));

	}

	/**
	 * gets user login details
	 */
	@Override
	public Response getUserDetails(String jwt)  {
		UserInfoHandler handler = new UserInfoHandler();
		UserSignup signupData = null;
		try {
			// jwt token validation and expiry validation
			String sub = handler.jwtValidationAndReturnSubect(jwt);
			signupData = handler.getUserInfo(sub);
		} catch (Exception e) {
			// send error response back to the user
			return ResponseUtil.handleException(e);
		}
		// send success response back to the user
		return ResponseUtil.handleSuccessResp(signupData);

	}

	/**
	 * allows user to signIn into system and generates signIn link which will be
	 * active for 15 mins only.
	 */
	@Override
	public Response login(UserSignIn signIn)  {
		SignInHandler handler = new SignInHandler();
		try {
			// validation userId empty or null // check this userId available in
			// the system or not
			handler.validationPhase(signIn);

			String userId = signIn.getUserId();

			// get user info
			UserSignup signupData = handler.getUserLogin(userId);

			if (signupData == null) {
				throw new MongoDatabaseException(AccountMgmtConstant.NO_RECORD_FOUND_ERR_MSG);
			}
			// generate jwt and handle expiry of 15 mins for
			// link and send mail
			handler.buildJWTAndSendMail(userId, signupData.getName(), signupData.getEmail());

		} catch (Exception e) {
			return ResponseUtil.handleException(e);
		}
		// send success response back to the user
		return ResponseUtil.handleSuccessResp(AccountMgmtConstant.LOGIN_SUCCESS_MSG);

	}

}
